#!/usr/bin/env python3
"""
ETAPA 5: SISTEMA DE ORQUESTACI√ìN EL√ÅSTICO
=========================================

Implementa un maestro el√°stico con 2 memorias (hilos) que monitorean constantemente:
1. MEMORIA 1: Monitor de Workers (ping constante)
2. MEMORIA 2: Monitor de Tareas (preparaci√≥n para ETAPA 6)

Caracter√≠sticas:
- Monitoreo continuo de workers
- Detecci√≥n autom√°tica de workers que se conectan/desconectan
- Estado persistente de workers
- Interfaz de gesti√≥n en tiempo real
- Logs detallados
- Recuperaci√≥n autom√°tica de fallos
"""

import requests
import json
import time
import threading
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from config_manager import get_config
import signal
import sys
from dataclasses import dataclass
from collections import deque
import queue

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/elastic_orchestrator.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class WorkerStatus:
    """Clase para almacenar el estado de un worker"""
    id: str
    ip: str
    port: int
    status: str = "unknown"
    last_ping: Optional[datetime] = None
    last_successful_ping: Optional[datetime] = None
    consecutive_failures: int = 0
    total_tasks_completed: int = 0
    average_response_time: float = 0.0
    response_times: deque = None
    
    def __post_init__(self):
        if self.response_times is None:
            self.response_times = deque(maxlen=10)  # √öltimos 10 tiempos de respuesta
    
    def update_response_time(self, response_time: float):
        """Actualizar tiempo de respuesta"""
        self.response_times.append(response_time)
        self.average_response_time = sum(self.response_times) / len(self.response_times)
    
    def is_healthy(self) -> bool:
        """Verificar si el worker est√° saludable"""
        if self.status != "active":
            return False
        
        # Considerar unhealthy si han pasado m√°s de 30 segundos sin ping exitoso
        if self.last_successful_ping:
            time_since_last_ping = datetime.now() - self.last_successful_ping
            if time_since_last_ping > timedelta(seconds=30):
                return False
        
        # Considerar unhealthy si hay muchos fallos consecutivos
        return self.consecutive_failures < 3
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertir a diccionario para JSON"""
        return {
            "id": self.id,
            "ip": self.ip,
            "port": self.port,
            "status": self.status,
            "last_ping": self.last_ping.isoformat() if self.last_ping else None,
            "last_successful_ping": self.last_successful_ping.isoformat() if self.last_successful_ping else None,
            "consecutive_failures": self.consecutive_failures,
            "total_tasks_completed": self.total_tasks_completed,
            "average_response_time": self.average_response_time,
            "is_healthy": self.is_healthy()
        }

class ElasticOrchestrator:
    """Orquestador el√°stico con monitoreo continuo"""
    
    def __init__(self, config_file: Optional[str] = None):
        """Inicializar el orquestador el√°stico"""
        self.env_config = get_config()
        self.running = False
        self.workers: Dict[str, WorkerStatus] = {}
        self.worker_lock = threading.RLock()
        self.task_queue = queue.Queue()
        self.result_queue = queue.Queue()
        
        # Configuraci√≥n desde .env
        self.docker_config = self.env_config.get_docker_config()
        self.timeout_config = self.env_config.get_timeout_config()
        self.benchmark_config = self.env_config.get_benchmark_config()
        
        # Configuraci√≥n de monitoreo
        self.ping_interval = 5  # segundos entre pings
        self.health_check_interval = 10  # segundos entre verificaciones de salud
        self.max_ping_failures = 5
        
        # Cargar workers desde configuraci√≥n
        self._load_workers_config(config_file)
        
        # Hilos de monitoreo
        self.worker_monitor_thread = None
        self.task_monitor_thread = None
        
        # Estad√≠sticas
        self.stats = {
            "total_pings": 0,
            "successful_pings": 0,
            "failed_pings": 0,
            "workers_discovered": 0,
            "workers_lost": 0,
            "uptime_start": datetime.now()
        }
        
        # Configurar manejo de se√±ales
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("üöÄ Orquestador el√°stico inicializado")
    
    def _load_workers_config(self, config_file: Optional[str] = None):
        """Cargar configuraci√≥n de workers"""
        if config_file and os.path.exists(config_file):
            with open(config_file, 'r') as f:
                config = json.load(f)
            workers_list = config.get('workers', [])
        else:
            workers_config = self.env_config.get_workers_config()
            workers_list = workers_config.get('workers', [])
        
        # Crear objetos WorkerStatus
        for worker_data in workers_list:
            worker_id = worker_data['id']
            self.workers[worker_id] = WorkerStatus(
                id=worker_id,
                ip=worker_data['ip'],
                port=worker_data['port']
            )
        
        logger.info(f"üìã Cargados {len(self.workers)} workers desde configuraci√≥n")
    
    def _signal_handler(self, signum, frame):
        """Manejar se√±ales de terminaci√≥n"""
        logger.info(f"üõë Recibida se√±al {signum}, terminando...")
        self.stop()
        sys.exit(0)
    
    def start(self):
        """Iniciar el orquestador el√°stico"""
        if self.running:
            logger.warning("‚ö†Ô∏è  El orquestador ya est√° en ejecuci√≥n")
            return
        
        self.running = True
        logger.info("üéØ Iniciando orquestador el√°stico...")
        
        # Crear directorio de logs
        os.makedirs('logs', exist_ok=True)
        
        # Iniciar MEMORIA 1: Monitor de Workers
        self.worker_monitor_thread = threading.Thread(
            target=self._worker_monitor_loop,
            name="WorkerMonitor",
            daemon=True
        )
        self.worker_monitor_thread.start()
        logger.info("üß† MEMORIA 1: Monitor de Workers iniciado")
        
        # Iniciar MEMORIA 2: Monitor de Tareas (preparaci√≥n para ETAPA 6)
        self.task_monitor_thread = threading.Thread(
            target=self._task_monitor_loop,
            name="TaskMonitor",
            daemon=True
        )
        self.task_monitor_thread.start()
        logger.info("üß† MEMORIA 2: Monitor de Tareas iniciado")
        
        logger.info("‚úÖ Orquestador el√°stico iniciado exitosamente")
    
    def stop(self):
        """Detener el orquestador el√°stico"""
        if not self.running:
            return
        
        logger.info("üõë Deteniendo orquestador el√°stico...")
        self.running = False
        
        # Esperar a que terminen los hilos
        if self.worker_monitor_thread and self.worker_monitor_thread.is_alive():
            self.worker_monitor_thread.join(timeout=5)
        
        if self.task_monitor_thread and self.task_monitor_thread.is_alive():
            self.task_monitor_thread.join(timeout=5)
        
        logger.info("‚úÖ Orquestador el√°stico detenido")
    
    def _worker_monitor_loop(self):
        """MEMORIA 1: Loop principal del monitor de workers"""
        logger.info("üîÑ Iniciando loop de monitoreo de workers...")
        
        while self.running:
            try:
                start_time = time.time()
                
                # Ping a todos los workers
                self._ping_all_workers()
                
                # Verificar salud de workers
                self._check_worker_health()
                
                # Actualizar estad√≠sticas
                self._update_stats()
                
                # Guardar estado
                self._save_worker_state()
                
                # Calcular tiempo de sleep
                elapsed = time.time() - start_time
                sleep_time = max(0, self.ping_interval - elapsed)
                
                if sleep_time > 0:
                    time.sleep(sleep_time)
                    
            except Exception as e:
                logger.error(f"‚ùå Error en monitor de workers: {e}")
                time.sleep(1)
    
    def _task_monitor_loop(self):
        """MEMORIA 2: Loop principal del monitor de tareas (preparaci√≥n ETAPA 6)"""
        logger.info("üîÑ Iniciando loop de monitoreo de tareas...")
        
        while self.running:
            try:
                # Por ahora, solo logging y preparaci√≥n para ETAPA 6
                # En ETAPA 6 se implementar√° la gesti√≥n de cola de tareas
                
                # Verificar cola de tareas
                if not self.task_queue.empty():
                    logger.info(f"üìã Tareas en cola: {self.task_queue.qsize()}")
                
                # Verificar resultados
                if not self.result_queue.empty():
                    logger.info(f"üìä Resultados pendientes: {self.result_queue.qsize()}")
                
                # Simular preparaci√≥n para gesti√≥n de tareas
                self._prepare_task_management()
                
                time.sleep(self.health_check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Error en monitor de tareas: {e}")
                time.sleep(1)
    
    def _ping_all_workers(self):
        """Hacer ping a todos los workers"""
        with self.worker_lock:
            for worker_id, worker in self.workers.items():
                self._ping_worker(worker)
    
    def _ping_worker(self, worker: WorkerStatus):
        """Hacer ping a un worker espec√≠fico"""
        try:
            start_time = time.time()
            url = f"http://{worker.ip}:{worker.port}/ping"
            
            response = requests.get(url, timeout=self.timeout_config['http_timeout'])
            response_time = time.time() - start_time
            
            self.stats["total_pings"] += 1
            
            if response.status_code == 200:
                # Ping exitoso
                worker.status = "active"
                worker.last_ping = datetime.now()
                worker.last_successful_ping = datetime.now()
                worker.consecutive_failures = 0
                worker.update_response_time(response_time)
                
                self.stats["successful_pings"] += 1
                
                if self.env_config.is_verbose():
                    logger.debug(f"‚úÖ Ping exitoso a {worker.id} ({response_time:.3f}s)")
                
                # Verificar si es un worker reci√©n conectado
                if worker.status == "unknown":
                    logger.info(f"üîó Worker {worker.id} conectado")
                    self.stats["workers_discovered"] += 1
                    
            else:
                self._handle_ping_failure(worker, f"HTTP {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            self._handle_ping_failure(worker, "Connection refused")
        except requests.exceptions.Timeout:
            self._handle_ping_failure(worker, "Timeout")
        except Exception as e:
            self._handle_ping_failure(worker, str(e))
    
    def _handle_ping_failure(self, worker: WorkerStatus, error: str):
        """Manejar fallo de ping"""
        worker.last_ping = datetime.now()
        worker.consecutive_failures += 1
        self.stats["failed_pings"] += 1
        
        # Cambiar estado seg√∫n n√∫mero de fallos
        if worker.consecutive_failures >= self.max_ping_failures:
            if worker.status == "active":
                logger.warning(f"‚ö†Ô∏è  Worker {worker.id} perdido despu√©s de {worker.consecutive_failures} fallos")
                self.stats["workers_lost"] += 1
            worker.status = "inactive"
        else:
            worker.status = "unstable"
        
        if self.env_config.is_verbose():
            logger.debug(f"‚ùå Ping fallido a {worker.id}: {error} (fallos: {worker.consecutive_failures})")
    
    def _check_worker_health(self):
        """Verificar salud general de workers"""
        with self.worker_lock:
            active_workers = [w for w in self.workers.values() if w.status == "active"]
            healthy_workers = [w for w in self.workers.values() if w.is_healthy()]
            
            if len(active_workers) != len(healthy_workers):
                logger.warning(f"‚ö†Ô∏è  {len(active_workers)} workers activos, {len(healthy_workers)} saludables")
    
    def _update_stats(self):
        """Actualizar estad√≠sticas"""
        uptime = datetime.now() - self.stats["uptime_start"]
        
        # Log peri√≥dico de estad√≠sticas (cada 5 minutos)
        if int(uptime.total_seconds()) % 300 == 0:
            self._log_statistics()
    
    def _log_statistics(self):
        """Escribir estad√≠sticas al log"""
        with self.worker_lock:
            active_count = len([w for w in self.workers.values() if w.status == "active"])
            healthy_count = len([w for w in self.workers.values() if w.is_healthy()])
            
            success_rate = (self.stats["successful_pings"] / max(1, self.stats["total_pings"])) * 100
            
            logger.info(f"üìä Estad√≠sticas - Workers: {active_count}/{len(self.workers)} activos, "
                       f"{healthy_count} saludables, Ping success: {success_rate:.1f}%")
    
    def _save_worker_state(self):
        """Guardar estado actual de workers"""
        try:
            with self.worker_lock:
                state = {
                    "timestamp": datetime.now().isoformat(),
                    "workers": {wid: worker.to_dict() for wid, worker in self.workers.items()},
                    "stats": self.stats.copy()
                }
                
                # Convertir datetime a string para JSON
                state["stats"]["uptime_start"] = state["stats"]["uptime_start"].isoformat()
                
                with open('logs/worker_state.json', 'w') as f:
                    json.dump(state, f, indent=2)
                    
        except Exception as e:
            logger.error(f"‚ùå Error guardando estado: {e}")
    
    def _prepare_task_management(self):
        """Preparar gesti√≥n de tareas para ETAPA 6"""
        # Placeholder para funcionalidad futura
        # En ETAPA 6 se implementar√°:
        # - Distribuci√≥n autom√°tica de tareas
        # - Balanceamiento de carga
        # - Recuperaci√≥n de tareas fallidas
        # - Priorizaci√≥n de tareas
        pass
    
    def get_worker_status(self, worker_id: Optional[str] = None) -> Dict[str, Any]:
        """Obtener estado de workers"""
        with self.worker_lock:
            if worker_id:
                if worker_id in self.workers:
                    return self.workers[worker_id].to_dict()
                else:
                    return {"error": f"Worker {worker_id} no encontrado"}
            else:
                return {
                    "workers": {wid: worker.to_dict() for wid, worker in self.workers.items()},
                    "summary": {
                        "total_workers": len(self.workers),
                        "active_workers": len([w for w in self.workers.values() if w.status == "active"]),
                        "healthy_workers": len([w for w in self.workers.values() if w.is_healthy()]),
                        "inactive_workers": len([w for w in self.workers.values() if w.status == "inactive"])
                    }
                }
    
    def get_statistics(self) -> Dict[str, Any]:
        """Obtener estad√≠sticas del sistema"""
        uptime = datetime.now() - self.stats["uptime_start"]
        return {
            **self.stats,
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": str(uptime).split('.')[0],  # Sin microsegundos
            "ping_success_rate": (self.stats["successful_pings"] / max(1, self.stats["total_pings"])) * 100
        }
    
    def execute_task(self, task: Dict[str, Any], worker_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """Ejecutar una tarea en un worker espec√≠fico o autom√°ticamente"""
        if worker_id:
            # Ejecutar en worker espec√≠fico
            if worker_id not in self.workers:
                return {"error": f"Worker {worker_id} no encontrado"}
            
            worker = self.workers[worker_id]
            if not worker.is_healthy():
                return {"error": f"Worker {worker_id} no est√° saludable"}
            
            return self._execute_task_on_worker(worker, task)
        else:
            # Ejecutar autom√°ticamente en el mejor worker disponible
            best_worker = self._find_best_worker()
            if not best_worker:
                return {"error": "No hay workers disponibles"}
            
            return self._execute_task_on_worker(best_worker, task)
    
    def _find_best_worker(self) -> Optional[WorkerStatus]:
        """Encontrar el mejor worker disponible"""
        with self.worker_lock:
            healthy_workers = [w for w in self.workers.values() if w.is_healthy()]
            
            if not healthy_workers:
                return None
            
            # Ordenar por tiempo de respuesta promedio
            healthy_workers.sort(key=lambda w: w.average_response_time)
            return healthy_workers[0]
    
    def _execute_task_on_worker(self, worker: WorkerStatus, task: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Ejecutar tarea en un worker espec√≠fico"""
        try:
            url = f"http://{worker.ip}:{worker.port}/execute"
            
            logger.info(f"üöÄ Ejecutando tarea en {worker.id}")
            
            response = requests.post(url, json=task, timeout=self.timeout_config['task_timeout'])
            
            if response.status_code == 200:
                result = response.json()
                worker.total_tasks_completed += 1
                
                logger.info(f"‚úÖ Tarea completada en {worker.id}")
                return result
            else:
                logger.error(f"‚ùå Error ejecutando tarea en {worker.id}: {response.status_code}")
                return {"error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå Error ejecutando tarea en {worker.id}: {e}")
            return {"error": str(e)}

def main():
    """Funci√≥n principal"""
    print("üé≠ SISTEMA DE ORQUESTACI√ìN EL√ÅSTICO - ETAPA 5")
    print("=" * 60)
    print("üß† MEMORIAS ACTIVAS:")
    print("   1. Monitor de Workers (ping constante)")
    print("   2. Monitor de Tareas (preparaci√≥n ETAPA 6)")
    print("=" * 60)
    
    # Crear y iniciar orquestador
    orchestrator = ElasticOrchestrator()
    orchestrator.start()
    
    try:
        # Interfaz interactiva
        while True:
            print("\nüéõÔ∏è  MEN√ö PRINCIPAL")
            print("1. Estado de workers")
            print("2. Estad√≠sticas del sistema")
            print("3. Ejecutar tarea")
            print("4. Mostrar configuraci√≥n")
            print("5. Logs en tiempo real")
            print("6. Salir")
            
            choice = input("\nSelecciona una opci√≥n (1-6): ").strip()
            
            if choice == "1":
                status = orchestrator.get_worker_status()
                print("\nüìä ESTADO DE WORKERS:")
                print("=" * 40)
                
                for worker_id, worker_data in status["workers"].items():
                    health_icon = "‚úÖ" if worker_data["is_healthy"] else "‚ùå"
                    print(f"{health_icon} {worker_id} ({worker_data['ip']})")
                    print(f"   Estado: {worker_data['status']}")
                    print(f"   Tiempo respuesta: {worker_data['average_response_time']:.3f}s")
                    print(f"   Tareas completadas: {worker_data['total_tasks_completed']}")
                    print(f"   √öltimo ping: {worker_data['last_ping']}")
                    print()
                
                summary = status["summary"]
                print(f"üìã RESUMEN: {summary['active_workers']}/{summary['total_workers']} activos, "
                      f"{summary['healthy_workers']} saludables")
                
            elif choice == "2":
                stats = orchestrator.get_statistics()
                print("\nüìà ESTAD√çSTICAS DEL SISTEMA:")
                print("=" * 40)
                print(f"‚è±Ô∏è  Tiempo en l√≠nea: {stats['uptime_formatted']}")
                print(f"üìä Pings totales: {stats['total_pings']}")
                print(f"‚úÖ Pings exitosos: {stats['successful_pings']}")
                print(f"‚ùå Pings fallidos: {stats['failed_pings']}")
                print(f"üìà Tasa de √©xito: {stats['ping_success_rate']:.1f}%")
                print(f"üîó Workers descubiertos: {stats['workers_discovered']}")
                print(f"üíî Workers perdidos: {stats['workers_lost']}")
                
            elif choice == "3":
                status = orchestrator.get_worker_status()
                healthy_workers = [w for w in status["workers"].values() if w["is_healthy"]]
                
                if not healthy_workers:
                    print("‚ùå No hay workers saludables disponibles")
                    continue
                
                print("\nüéØ EJECUTAR TAREA:")
                print("Workers disponibles:")
                for i, worker in enumerate(healthy_workers):
                    print(f"{i+1}. {worker['id']} ({worker['ip']}) - {worker['average_response_time']:.3f}s")
                print(f"{len(healthy_workers)+1}. Autom√°tico (mejor worker)")
                
                try:
                    worker_choice = input("Selecciona worker: ").strip()
                    
                    if worker_choice == str(len(healthy_workers)+1):
                        selected_worker_id = None
                    else:
                        worker_idx = int(worker_choice) - 1
                        selected_worker_id = healthy_workers[worker_idx]["id"]
                    
                    # Configurar tarea
                    print("\nConfigurar tarea:")
                    benchmark = input("Benchmark (benchmark.py/benchmark_cython.py): ").strip() or "benchmark.py"
                    particulas = input("Part√≠culas (100): ").strip() or "100"
                    pasos = input("Pasos (500): ").strip() or "500"
                    semilla = input("Semilla (42): ").strip() or "42"
                    
                    task = {
                        "benchmark": benchmark,
                        "params": {
                            "NUM_PARTICULAS": int(particulas),
                            "NUM_PASOS": int(pasos),
                            "SEMILLA": int(semilla)
                        }
                    }
                    
                    result = orchestrator.execute_task(task, selected_worker_id)
                    
                    if result and "error" not in result:
                        print("‚úÖ Tarea ejecutada exitosamente")
                        print(f"   Tiempo: {result.get('execution_time', 'N/A')}s")
                    else:
                        print(f"‚ùå Error: {result.get('error', 'Desconocido')}")
                        
                except (ValueError, IndexError):
                    print("‚ùå Selecci√≥n inv√°lida")
                    
            elif choice == "4":
                orchestrator.env_config.print_config()
                
            elif choice == "5":
                print("\nüìã LOGS EN TIEMPO REAL (Ctrl+C para salir):")
                print("=" * 40)
                try:
                    # Mostrar logs en tiempo real
                    import subprocess
                    subprocess.run(["tail", "-f", "logs/elastic_orchestrator.log"])
                except KeyboardInterrupt:
                    print("\n‚Ü©Ô∏è  Volviendo al men√∫...")
                except FileNotFoundError:
                    print("‚ùå No se encontr√≥ el archivo de logs")
                    
            elif choice == "6":
                print("üëã Deteniendo orquestador...")
                orchestrator.stop()
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida")
                
    except KeyboardInterrupt:
        print("\nüõë Interrupci√≥n recibida...")
        orchestrator.stop()

if __name__ == "__main__":
    main()
